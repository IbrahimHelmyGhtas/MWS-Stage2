class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get Reviews_DATABASE_URL(){return"http://localhost:1337/reviews/?restaurant_id="}static fetchRestaurantsFast(e){return fetch(DBHelper.DATABASE_URL,{method:"GET"}).then(e=>{const t=e.json();return console.log("data",e),console.log("restaurants",t),t}).then(t=>{dbPromise.then(function(e){var n=e.transaction("restaurants","readwrite"),s=n.objectStore("restaurants");return t.forEach(function(e){s.put(e)}),n.complete}).then(function(){console.log("restaurantStore Added successfully")}),e(null,t)}).catch(t=>{console.log("Error Form favorit:",t),e(t,null)})}static fetchRestaurants(e){let t=new XMLHttpRequest;t.open("GET",DBHelper.DATABASE_URL),t.onload=(()=>{if(200===t.status){const n=JSON.parse(t.responseText);console.log("restaurants",n),dbPromise.then(function(e){var t=e.transaction("restaurants","readwrite"),s=t.objectStore("restaurants");return n.forEach(function(e){s.put(e)}),t.complete}).then(function(){console.log("restaurantStore Added successfully")}),e(null,n)}else{dbPromise.then(function(e){return e.transaction("restaurants").objectStore("restaurants").getAll()}).then(function(t){e(null,t),console.log("Offline Restaurants obj : ",t)});const n=`Request failed. Returned status of ${t.status}`;e(n,null)}}),t.send()}static fetchReviewsFast(e,t){return fetch(DBHelper.Reviews_DATABASE_URL+e,{method:"GET"}).then(e=>{const t=e.json();return console.log("reviews",t),t}).then(e=>{dbPromiseReviews.then(function(t){var n=t.transaction("reviews","readwrite"),s=n.objectStore("reviews");return e.forEach(function(e){s.put(e)}),n.complete}).then(function(){console.log("reviewStore Added successfully")}),t(null,e)}).catch(e=>{dbPromiseReviews.then(function(e){return e.transaction("reviews").objectStore("reviews").getAll()}).then(function(e){t(null,e),console.log("Offline Reviews obj : ",e)}),console.log("Error Form favorit:",e),t(e,null)})}static fetchReviews(e,t){let n=new XMLHttpRequest;n.open("GET",DBHelper.Reviews_DATABASE_URL+e),n.onload=(()=>{if(200===n.status){const e=JSON.parse(n.responseText);console.log("reviews",e),dbPromiseReviews.then(function(t){var n=t.transaction("reviews","readwrite"),s=n.objectStore("reviews");return e.forEach(function(e){s.put(e)}),n.complete}).then(function(){console.log("reviewStore Added successfully")}),t(null,e)}else{dbPromiseReviews.then(function(e){return e.transaction("reviews").objectStore("reviews").getAll()}).then(function(e){t(null,e),console.log("Offline Reviews obj : ",e)});const e=`Request failed. Returned status of ${n.status}`;t(e,null)}}),n.send()}static fetchRestaurantById(e,t){DBHelper.fetchRestaurantsFast((n,s)=>{if(n)t(n,null);else{const n=s.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchReviewsByRestaurantId(e,t){DBHelper.fetchReviewsFast(e,(n,s)=>{if(n)t(n,null);else{const n=s.filter(t=>t.restaurant_id==e);n?t(null,n):t("Reviews does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurantsFast((n,s)=>{if(n)t(n,null);else{const n=s.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurantsFast((n,s)=>{if(n)t(n,null);else{const n=s.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurantsFast((s,r)=>{if(s)n(s,null);else{let s=r;"all"!=e&&(s=s.filter(t=>t.cuisine_type==e)),"all"!=t&&(s=s.filter(e=>e.neighborhood==t)),n(null,s)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurantsFast((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),s=t.filter((e,n)=>t.indexOf(e)==n);e(null,s)}})}static fetchReviewsHTML(e,t){DBHelper.fetchReviewsFast(e,(e,n)=>{e?t(e,null):t(null,n)})}static fetchCuisines(e){DBHelper.fetchRestaurantsFast((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),s=t.filter((e,n)=>t.indexOf(e)==n);e(null,s)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}